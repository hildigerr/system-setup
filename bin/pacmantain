#!/bin/bash

#pkgs_installed_all=$(expac -Q '%n')
state_dir="${XDG_STATE_HOME:-$HOME/.local/state}/pacman"
mkdir -p "${state_dir}"
touch "${state_dir}/verified_orphans_ok.lst"
touch "${state_dir}/verified_optional_only_ok.lst"
touch "${state_dir}/verified_explicit_dependencies.lst"
touch "${state_dir}/verified_explicit_installs.lst"
touch "${state_dir}/verified_foreign_maintained.lst"

rcgen() {
  #echo "PS1='\\u@\\h:${1}\\$ ';whitelist(){ echo \"${1}\" >> \"${2}\"; }"
  echo "
    HISTCONTROL=ignoreboth:erasedups
    PS1='\\u@\\h:${1}\\$ '
    whitelist(){ echo \"${1}\" >> \"${2}\"; }
  "
}

verify() {
  pkgs_needing_verification=$(sort <(echo "$1")\
      "$whitelist_file" | uniq -u)
  for each in ${pkgs_needing_verification}; do
      pacman -Qi $each
      rcsub=$(rcgen "$each" "$whitelist_file")
      bash --rcfile <(echo "$rcsub")
  done
}


echo "Verify packages installed that are only optional:"
whitelist_file="${state_dir}/verified_optional_only_ok.lst"
pkgs_installed_asdeps=$(pacman -Qqd)
pkgs_installed_asdeps_only=$(pacman -Qi ${pkgs_installed_asdeps} | awk '
    /^Name/ {name=$3}
    /^Required By/ {if ($4 == "None") {print name}}
')
verify "$pkgs_installed_asdeps_only"


echo "Verify explicitly installed packages that are dependencies:"
whitelist_file="${state_dir}/verified_explicit_dependencies.lst"
pkgs_installed_explicitly=$(pacman -Qqe)
pkgs_installed_explicit_aredeps=$(pacman -Qi ${pkgs_installed_explicitly} | awk '
    /^Name/ {name=$3}
    /^Required By/ {if ($4 != "None") {print name}}
')
verify "$pkgs_installed_explicit_aredeps"


echo "Searching for orphaned packages:"
whitelist_file="${state_dir}/verified_orphans_ok.lst"
pkgs_orphaned=$(pacman -Qdtq)
verify "$pkgs_orphaned"


echo "Verify other installed packages still wanted:"
whitelist_file="${state_dir}/verified_explicit_installs.lst"
pkgs_installed=$(pacman -Qetq)
verify "$pkgs_installed"


echo "Verify foreign packages (whitelist if personally maintained or notifications enabled):"
whitelist_file="${state_dir}/verified_foreign_maintained.lst"
pkgs_foreign=$(pacman -Qqm)
verify "$pkgs_foreign"


echo "Searching for pacnew files..."
pacnew_files=$(find / -type f -name "*.pacnew" 2>/dev/null)
if [ -z "${pacnew_files}" ]; then echo "None."; else
  echo "${pacnew_files}"
  IFS=$'\n' read -r -d '' -a pacnew_file_array <<< "${pacnew_files}"
  for each in "${pacnew_file_array[@]}"; do
    read -s -n 1 -p "Do you want to meld \"${each}\" (y/n)? " barf_q </dev/tty && echo
    if [ "${barf_q}" = 'y' ] || [ "${barf_q}" = 'Y' ] ; then
      sudo -E meld "${each%.pacnew}"*
    fi
    rcsub=$(rcgen "$each" "/dev/null")
    nudir=$(dirname "$each")
    pushd "${nudir}" >/dev/null
    bash --rcfile <(echo "$rcsub")
    popd >/dev/null
  done
fi


echo "Searching for pacsave files..."
pacsave_files=$(find / -type f -name "*.pacsave" 2>/dev/null)
if [ -z "${pacsave_files}" ]; then echo "None."; else
  echo "${pacsave_files}"
fi

